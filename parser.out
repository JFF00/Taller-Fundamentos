Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DISTINTOQUE
    FALSE
    FLOAT
    MAYORIGUAL
    MENORIGUAL
    TRUE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print_statement
Rule 5     instruccion -> while_statement
Rule 6     instruccion -> if_statement
Rule 7     instruccion -> if_else_statement
Rule 8     instruccion -> assign_statement
Rule 9     instruccion -> for_statement
Rule 10    instruccion -> declare_function
Rule 11    instruccion -> call_function
Rule 12    print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C
Rule 13    for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
Rule 14    while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
Rule 15    if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
Rule 16    if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
Rule 17    assign_statement -> ID IGUAL expression
Rule 18    declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
Rule 19    parametros -> ID
Rule 20    parametros -> ID COMA parametros
Rule 21    parametros -> empty
Rule 22    call_function -> ID PARENTESIS_A argumentos PARENTESIS_C
Rule 23    argumentos -> expression
Rule 24    argumentos -> expression COMA argumentos
Rule 25    expression -> NUMBER
Rule 26    expression -> STRING
Rule 27    expression -> BOOLEAN
Rule 28    expression -> binary_op
Rule 29    expression -> variable
Rule 30    expression -> logical_op
Rule 31    elementos -> expression
Rule 32    elementos -> elementos COMA expression
Rule 33    variable -> ID
Rule 34    assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C
Rule 35    expression -> ID CORCHETE_A expression CORCHETE_C
Rule 36    expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
Rule 37    expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
Rule 38    binary_op -> expression SUMA expression
Rule 39    binary_op -> expression RESTA expression
Rule 40    binary_op -> expression MULTIPLICACION expression
Rule 41    binary_op -> expression DIVISION expression
Rule 42    binary_op -> expression MENORQUE expression
Rule 43    binary_op -> expression MAYORQUE expression
Rule 44    binary_op -> expression IGUALQUE expression
Rule 45    binary_op -> expression MODULO expression
Rule 46    logical_op -> expression AND expression
Rule 47    logical_op -> expression OR expression
Rule 48    logical_op -> NOT expression
Rule 49    instruccion -> ID MASIGUAL
Rule 50    empty -> <empty>

Terminals, with rules where they appear

ADD                  : 36
AND                  : 46
BOOLEAN              : 27
COMA                 : 20 24 32
CORCHETE_A           : 34 35
CORCHETE_C           : 34 35
DISTINTOQUE          : 
DIVISION             : 41
ELSE                 : 16
FALSE                : 
FLOAT                : 
FOR                  : 13
FUNCTION             : 18
ID                   : 13 17 18 19 20 22 33 34 35 36 37 49
IF                   : 15 16
IGUAL                : 13 17 34
IGUALQUE             : 44
LLAVE_A              : 13 14 15 16 16 18
LLAVE_C              : 13 14 15 16 16 18
MASIGUAL             : 49
MAYORIGUAL           : 
MAYORQUE             : 43
MENORIGUAL           : 
MENORQUE             : 42
MODULO               : 45
MULTIPLICACION       : 40
NOT                  : 48
NUMBER               : 25
OR                   : 47
PARENTESIS_A         : 12 13 14 15 16 18 22 36 37
PARENTESIS_C         : 12 13 14 15 16 18 22 36 37
PRINT                : 12
PUNTO                : 36 37
REMOVE               : 37
RESTA                : 39
STRING               : 26
SUMA                 : 38
TO                   : 13
TRUE                 : 
WHILE                : 14
error                : 

Nonterminals, with rules where they appear

argumentos           : 22 24
assign_statement     : 8
binary_op            : 28
call_function        : 11
declare_function     : 10
elementos            : 32 34
empty                : 21
expression           : 12 13 13 14 15 16 17 23 24 31 32 35 36 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48
for_statement        : 9
if_else_statement    : 7
if_statement         : 6
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 13 14 15 16 16 18
logical_op           : 30
parametros           : 18 20
print_statement      : 4
variable             : 29
while_statement      : 5

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    $end            reduce using rule 1 (init -> instrucciones .)
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instruccion                    shift and go to state 18
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 3

    (3) instrucciones -> instruccion .

    ID              reduce using rule 3 (instrucciones -> instruccion .)
    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    LLAVE_C         reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print_statement .

    ID              reduce using rule 4 (instruccion -> print_statement .)
    PRINT           reduce using rule 4 (instruccion -> print_statement .)
    WHILE           reduce using rule 4 (instruccion -> print_statement .)
    IF              reduce using rule 4 (instruccion -> print_statement .)
    FOR             reduce using rule 4 (instruccion -> print_statement .)
    FUNCTION        reduce using rule 4 (instruccion -> print_statement .)
    $end            reduce using rule 4 (instruccion -> print_statement .)
    LLAVE_C         reduce using rule 4 (instruccion -> print_statement .)


state 5

    (5) instruccion -> while_statement .

    ID              reduce using rule 5 (instruccion -> while_statement .)
    PRINT           reduce using rule 5 (instruccion -> while_statement .)
    WHILE           reduce using rule 5 (instruccion -> while_statement .)
    IF              reduce using rule 5 (instruccion -> while_statement .)
    FOR             reduce using rule 5 (instruccion -> while_statement .)
    FUNCTION        reduce using rule 5 (instruccion -> while_statement .)
    $end            reduce using rule 5 (instruccion -> while_statement .)
    LLAVE_C         reduce using rule 5 (instruccion -> while_statement .)


state 6

    (6) instruccion -> if_statement .

    ID              reduce using rule 6 (instruccion -> if_statement .)
    PRINT           reduce using rule 6 (instruccion -> if_statement .)
    WHILE           reduce using rule 6 (instruccion -> if_statement .)
    IF              reduce using rule 6 (instruccion -> if_statement .)
    FOR             reduce using rule 6 (instruccion -> if_statement .)
    FUNCTION        reduce using rule 6 (instruccion -> if_statement .)
    $end            reduce using rule 6 (instruccion -> if_statement .)
    LLAVE_C         reduce using rule 6 (instruccion -> if_statement .)


state 7

    (7) instruccion -> if_else_statement .

    ID              reduce using rule 7 (instruccion -> if_else_statement .)
    PRINT           reduce using rule 7 (instruccion -> if_else_statement .)
    WHILE           reduce using rule 7 (instruccion -> if_else_statement .)
    IF              reduce using rule 7 (instruccion -> if_else_statement .)
    FOR             reduce using rule 7 (instruccion -> if_else_statement .)
    FUNCTION        reduce using rule 7 (instruccion -> if_else_statement .)
    $end            reduce using rule 7 (instruccion -> if_else_statement .)
    LLAVE_C         reduce using rule 7 (instruccion -> if_else_statement .)


state 8

    (8) instruccion -> assign_statement .

    ID              reduce using rule 8 (instruccion -> assign_statement .)
    PRINT           reduce using rule 8 (instruccion -> assign_statement .)
    WHILE           reduce using rule 8 (instruccion -> assign_statement .)
    IF              reduce using rule 8 (instruccion -> assign_statement .)
    FOR             reduce using rule 8 (instruccion -> assign_statement .)
    FUNCTION        reduce using rule 8 (instruccion -> assign_statement .)
    $end            reduce using rule 8 (instruccion -> assign_statement .)
    LLAVE_C         reduce using rule 8 (instruccion -> assign_statement .)


state 9

    (9) instruccion -> for_statement .

    ID              reduce using rule 9 (instruccion -> for_statement .)
    PRINT           reduce using rule 9 (instruccion -> for_statement .)
    WHILE           reduce using rule 9 (instruccion -> for_statement .)
    IF              reduce using rule 9 (instruccion -> for_statement .)
    FOR             reduce using rule 9 (instruccion -> for_statement .)
    FUNCTION        reduce using rule 9 (instruccion -> for_statement .)
    $end            reduce using rule 9 (instruccion -> for_statement .)
    LLAVE_C         reduce using rule 9 (instruccion -> for_statement .)


state 10

    (10) instruccion -> declare_function .

    ID              reduce using rule 10 (instruccion -> declare_function .)
    PRINT           reduce using rule 10 (instruccion -> declare_function .)
    WHILE           reduce using rule 10 (instruccion -> declare_function .)
    IF              reduce using rule 10 (instruccion -> declare_function .)
    FOR             reduce using rule 10 (instruccion -> declare_function .)
    FUNCTION        reduce using rule 10 (instruccion -> declare_function .)
    $end            reduce using rule 10 (instruccion -> declare_function .)
    LLAVE_C         reduce using rule 10 (instruccion -> declare_function .)


state 11

    (11) instruccion -> call_function .

    ID              reduce using rule 11 (instruccion -> call_function .)
    PRINT           reduce using rule 11 (instruccion -> call_function .)
    WHILE           reduce using rule 11 (instruccion -> call_function .)
    IF              reduce using rule 11 (instruccion -> call_function .)
    FOR             reduce using rule 11 (instruccion -> call_function .)
    FUNCTION        reduce using rule 11 (instruccion -> call_function .)
    $end            reduce using rule 11 (instruccion -> call_function .)
    LLAVE_C         reduce using rule 11 (instruccion -> call_function .)


state 12

    (49) instruccion -> ID . MASIGUAL
    (17) assign_statement -> ID . IGUAL expression
    (34) assign_statement -> ID . IGUAL CORCHETE_A elementos CORCHETE_C
    (22) call_function -> ID . PARENTESIS_A argumentos PARENTESIS_C

    MASIGUAL        shift and go to state 19
    IGUAL           shift and go to state 20
    PARENTESIS_A    shift and go to state 21


state 13

    (12) print_statement -> PRINT . PARENTESIS_A expression PARENTESIS_C

    PARENTESIS_A    shift and go to state 22


state 14

    (14) while_statement -> WHILE . PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C

    PARENTESIS_A    shift and go to state 23


state 15

    (15) if_statement -> IF . PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> IF . PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C

    PARENTESIS_A    shift and go to state 24


state 16

    (13) for_statement -> FOR . PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C

    PARENTESIS_A    shift and go to state 25


state 17

    (18) declare_function -> FUNCTION . ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C

    ID              shift and go to state 26


state 18

    (2) instrucciones -> instrucciones instruccion .

    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LLAVE_C         reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 19

    (49) instruccion -> ID MASIGUAL .

    ID              reduce using rule 49 (instruccion -> ID MASIGUAL .)
    PRINT           reduce using rule 49 (instruccion -> ID MASIGUAL .)
    WHILE           reduce using rule 49 (instruccion -> ID MASIGUAL .)
    IF              reduce using rule 49 (instruccion -> ID MASIGUAL .)
    FOR             reduce using rule 49 (instruccion -> ID MASIGUAL .)
    FUNCTION        reduce using rule 49 (instruccion -> ID MASIGUAL .)
    $end            reduce using rule 49 (instruccion -> ID MASIGUAL .)
    LLAVE_C         reduce using rule 49 (instruccion -> ID MASIGUAL .)


state 20

    (17) assign_statement -> ID IGUAL . expression
    (34) assign_statement -> ID IGUAL . CORCHETE_A elementos CORCHETE_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    CORCHETE_A      shift and go to state 29
    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 28
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 21

    (22) call_function -> ID PARENTESIS_A . argumentos PARENTESIS_C
    (23) argumentos -> . expression
    (24) argumentos -> . expression COMA argumentos
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    argumentos                     shift and go to state 37
    expression                     shift and go to state 38
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 22

    (12) print_statement -> PRINT PARENTESIS_A . expression PARENTESIS_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 39
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 23

    (14) while_statement -> WHILE PARENTESIS_A . expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 40
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 24

    (15) if_statement -> IF PARENTESIS_A . expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> IF PARENTESIS_A . expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 41
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 25

    (13) for_statement -> FOR PARENTESIS_A . ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C

    ID              shift and go to state 42


state 26

    (18) declare_function -> FUNCTION ID . PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C

    PARENTESIS_A    shift and go to state 43


state 27

    (35) expression -> ID . CORCHETE_A expression CORCHETE_C
    (36) expression -> ID . PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> ID . PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (33) variable -> ID .

    CORCHETE_A      shift and go to state 44
    PUNTO           shift and go to state 45
    SUMA            reduce using rule 33 (variable -> ID .)
    RESTA           reduce using rule 33 (variable -> ID .)
    MULTIPLICACION  reduce using rule 33 (variable -> ID .)
    DIVISION        reduce using rule 33 (variable -> ID .)
    MENORQUE        reduce using rule 33 (variable -> ID .)
    MAYORQUE        reduce using rule 33 (variable -> ID .)
    IGUALQUE        reduce using rule 33 (variable -> ID .)
    MODULO          reduce using rule 33 (variable -> ID .)
    AND             reduce using rule 33 (variable -> ID .)
    OR              reduce using rule 33 (variable -> ID .)
    ID              reduce using rule 33 (variable -> ID .)
    PRINT           reduce using rule 33 (variable -> ID .)
    WHILE           reduce using rule 33 (variable -> ID .)
    IF              reduce using rule 33 (variable -> ID .)
    FOR             reduce using rule 33 (variable -> ID .)
    FUNCTION        reduce using rule 33 (variable -> ID .)
    $end            reduce using rule 33 (variable -> ID .)
    LLAVE_C         reduce using rule 33 (variable -> ID .)
    COMA            reduce using rule 33 (variable -> ID .)
    PARENTESIS_C    reduce using rule 33 (variable -> ID .)
    CORCHETE_C      reduce using rule 33 (variable -> ID .)
    TO              reduce using rule 33 (variable -> ID .)


state 28

    (17) assign_statement -> ID IGUAL expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    ID              reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    PRINT           reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    WHILE           reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    IF              reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    FOR             reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    FUNCTION        reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    $end            reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    LLAVE_C         reduce using rule 17 (assign_statement -> ID IGUAL expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 29

    (34) assign_statement -> ID IGUAL CORCHETE_A . elementos CORCHETE_C
    (31) elementos -> . expression
    (32) elementos -> . elementos COMA expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    elementos                      shift and go to state 56
    expression                     shift and go to state 57
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 30

    (25) expression -> NUMBER .

    SUMA            reduce using rule 25 (expression -> NUMBER .)
    RESTA           reduce using rule 25 (expression -> NUMBER .)
    MULTIPLICACION  reduce using rule 25 (expression -> NUMBER .)
    DIVISION        reduce using rule 25 (expression -> NUMBER .)
    MENORQUE        reduce using rule 25 (expression -> NUMBER .)
    MAYORQUE        reduce using rule 25 (expression -> NUMBER .)
    IGUALQUE        reduce using rule 25 (expression -> NUMBER .)
    MODULO          reduce using rule 25 (expression -> NUMBER .)
    AND             reduce using rule 25 (expression -> NUMBER .)
    OR              reduce using rule 25 (expression -> NUMBER .)
    ID              reduce using rule 25 (expression -> NUMBER .)
    PRINT           reduce using rule 25 (expression -> NUMBER .)
    WHILE           reduce using rule 25 (expression -> NUMBER .)
    IF              reduce using rule 25 (expression -> NUMBER .)
    FOR             reduce using rule 25 (expression -> NUMBER .)
    FUNCTION        reduce using rule 25 (expression -> NUMBER .)
    $end            reduce using rule 25 (expression -> NUMBER .)
    LLAVE_C         reduce using rule 25 (expression -> NUMBER .)
    COMA            reduce using rule 25 (expression -> NUMBER .)
    PARENTESIS_C    reduce using rule 25 (expression -> NUMBER .)
    CORCHETE_C      reduce using rule 25 (expression -> NUMBER .)
    TO              reduce using rule 25 (expression -> NUMBER .)


state 31

    (26) expression -> STRING .

    SUMA            reduce using rule 26 (expression -> STRING .)
    RESTA           reduce using rule 26 (expression -> STRING .)
    MULTIPLICACION  reduce using rule 26 (expression -> STRING .)
    DIVISION        reduce using rule 26 (expression -> STRING .)
    MENORQUE        reduce using rule 26 (expression -> STRING .)
    MAYORQUE        reduce using rule 26 (expression -> STRING .)
    IGUALQUE        reduce using rule 26 (expression -> STRING .)
    MODULO          reduce using rule 26 (expression -> STRING .)
    AND             reduce using rule 26 (expression -> STRING .)
    OR              reduce using rule 26 (expression -> STRING .)
    ID              reduce using rule 26 (expression -> STRING .)
    PRINT           reduce using rule 26 (expression -> STRING .)
    WHILE           reduce using rule 26 (expression -> STRING .)
    IF              reduce using rule 26 (expression -> STRING .)
    FOR             reduce using rule 26 (expression -> STRING .)
    FUNCTION        reduce using rule 26 (expression -> STRING .)
    $end            reduce using rule 26 (expression -> STRING .)
    LLAVE_C         reduce using rule 26 (expression -> STRING .)
    COMA            reduce using rule 26 (expression -> STRING .)
    PARENTESIS_C    reduce using rule 26 (expression -> STRING .)
    CORCHETE_C      reduce using rule 26 (expression -> STRING .)
    TO              reduce using rule 26 (expression -> STRING .)


state 32

    (27) expression -> BOOLEAN .

    SUMA            reduce using rule 27 (expression -> BOOLEAN .)
    RESTA           reduce using rule 27 (expression -> BOOLEAN .)
    MULTIPLICACION  reduce using rule 27 (expression -> BOOLEAN .)
    DIVISION        reduce using rule 27 (expression -> BOOLEAN .)
    MENORQUE        reduce using rule 27 (expression -> BOOLEAN .)
    MAYORQUE        reduce using rule 27 (expression -> BOOLEAN .)
    IGUALQUE        reduce using rule 27 (expression -> BOOLEAN .)
    MODULO          reduce using rule 27 (expression -> BOOLEAN .)
    AND             reduce using rule 27 (expression -> BOOLEAN .)
    OR              reduce using rule 27 (expression -> BOOLEAN .)
    ID              reduce using rule 27 (expression -> BOOLEAN .)
    PRINT           reduce using rule 27 (expression -> BOOLEAN .)
    WHILE           reduce using rule 27 (expression -> BOOLEAN .)
    IF              reduce using rule 27 (expression -> BOOLEAN .)
    FOR             reduce using rule 27 (expression -> BOOLEAN .)
    FUNCTION        reduce using rule 27 (expression -> BOOLEAN .)
    $end            reduce using rule 27 (expression -> BOOLEAN .)
    LLAVE_C         reduce using rule 27 (expression -> BOOLEAN .)
    COMA            reduce using rule 27 (expression -> BOOLEAN .)
    PARENTESIS_C    reduce using rule 27 (expression -> BOOLEAN .)
    CORCHETE_C      reduce using rule 27 (expression -> BOOLEAN .)
    TO              reduce using rule 27 (expression -> BOOLEAN .)


state 33

    (28) expression -> binary_op .

    SUMA            reduce using rule 28 (expression -> binary_op .)
    RESTA           reduce using rule 28 (expression -> binary_op .)
    MULTIPLICACION  reduce using rule 28 (expression -> binary_op .)
    DIVISION        reduce using rule 28 (expression -> binary_op .)
    MENORQUE        reduce using rule 28 (expression -> binary_op .)
    MAYORQUE        reduce using rule 28 (expression -> binary_op .)
    IGUALQUE        reduce using rule 28 (expression -> binary_op .)
    MODULO          reduce using rule 28 (expression -> binary_op .)
    AND             reduce using rule 28 (expression -> binary_op .)
    OR              reduce using rule 28 (expression -> binary_op .)
    ID              reduce using rule 28 (expression -> binary_op .)
    PRINT           reduce using rule 28 (expression -> binary_op .)
    WHILE           reduce using rule 28 (expression -> binary_op .)
    IF              reduce using rule 28 (expression -> binary_op .)
    FOR             reduce using rule 28 (expression -> binary_op .)
    FUNCTION        reduce using rule 28 (expression -> binary_op .)
    $end            reduce using rule 28 (expression -> binary_op .)
    LLAVE_C         reduce using rule 28 (expression -> binary_op .)
    COMA            reduce using rule 28 (expression -> binary_op .)
    PARENTESIS_C    reduce using rule 28 (expression -> binary_op .)
    CORCHETE_C      reduce using rule 28 (expression -> binary_op .)
    TO              reduce using rule 28 (expression -> binary_op .)


state 34

    (29) expression -> variable .

    SUMA            reduce using rule 29 (expression -> variable .)
    RESTA           reduce using rule 29 (expression -> variable .)
    MULTIPLICACION  reduce using rule 29 (expression -> variable .)
    DIVISION        reduce using rule 29 (expression -> variable .)
    MENORQUE        reduce using rule 29 (expression -> variable .)
    MAYORQUE        reduce using rule 29 (expression -> variable .)
    IGUALQUE        reduce using rule 29 (expression -> variable .)
    MODULO          reduce using rule 29 (expression -> variable .)
    AND             reduce using rule 29 (expression -> variable .)
    OR              reduce using rule 29 (expression -> variable .)
    ID              reduce using rule 29 (expression -> variable .)
    PRINT           reduce using rule 29 (expression -> variable .)
    WHILE           reduce using rule 29 (expression -> variable .)
    IF              reduce using rule 29 (expression -> variable .)
    FOR             reduce using rule 29 (expression -> variable .)
    FUNCTION        reduce using rule 29 (expression -> variable .)
    $end            reduce using rule 29 (expression -> variable .)
    LLAVE_C         reduce using rule 29 (expression -> variable .)
    COMA            reduce using rule 29 (expression -> variable .)
    PARENTESIS_C    reduce using rule 29 (expression -> variable .)
    CORCHETE_C      reduce using rule 29 (expression -> variable .)
    TO              reduce using rule 29 (expression -> variable .)


state 35

    (30) expression -> logical_op .

    SUMA            reduce using rule 30 (expression -> logical_op .)
    RESTA           reduce using rule 30 (expression -> logical_op .)
    MULTIPLICACION  reduce using rule 30 (expression -> logical_op .)
    DIVISION        reduce using rule 30 (expression -> logical_op .)
    MENORQUE        reduce using rule 30 (expression -> logical_op .)
    MAYORQUE        reduce using rule 30 (expression -> logical_op .)
    IGUALQUE        reduce using rule 30 (expression -> logical_op .)
    MODULO          reduce using rule 30 (expression -> logical_op .)
    AND             reduce using rule 30 (expression -> logical_op .)
    OR              reduce using rule 30 (expression -> logical_op .)
    ID              reduce using rule 30 (expression -> logical_op .)
    PRINT           reduce using rule 30 (expression -> logical_op .)
    WHILE           reduce using rule 30 (expression -> logical_op .)
    IF              reduce using rule 30 (expression -> logical_op .)
    FOR             reduce using rule 30 (expression -> logical_op .)
    FUNCTION        reduce using rule 30 (expression -> logical_op .)
    $end            reduce using rule 30 (expression -> logical_op .)
    LLAVE_C         reduce using rule 30 (expression -> logical_op .)
    COMA            reduce using rule 30 (expression -> logical_op .)
    PARENTESIS_C    reduce using rule 30 (expression -> logical_op .)
    CORCHETE_C      reduce using rule 30 (expression -> logical_op .)
    TO              reduce using rule 30 (expression -> logical_op .)


state 36

    (48) logical_op -> NOT . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 58
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 37

    (22) call_function -> ID PARENTESIS_A argumentos . PARENTESIS_C

    PARENTESIS_C    shift and go to state 59


state 38

    (23) argumentos -> expression .
    (24) argumentos -> expression . COMA argumentos
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    PARENTESIS_C    reduce using rule 23 (argumentos -> expression .)
    COMA            shift and go to state 60
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 39

    (12) print_statement -> PRINT PARENTESIS_A expression . PARENTESIS_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    PARENTESIS_C    shift and go to state 61
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 40

    (14) while_statement -> WHILE PARENTESIS_A expression . PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    PARENTESIS_C    shift and go to state 62
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 41

    (15) if_statement -> IF PARENTESIS_A expression . PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> IF PARENTESIS_A expression . PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    PARENTESIS_C    shift and go to state 63
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 42

    (13) for_statement -> FOR PARENTESIS_A ID . IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C

    IGUAL           shift and go to state 64


state 43

    (18) declare_function -> FUNCTION ID PARENTESIS_A . parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (19) parametros -> . ID
    (20) parametros -> . ID COMA parametros
    (21) parametros -> . empty
    (50) empty -> .

    ID              shift and go to state 65
    PARENTESIS_C    reduce using rule 50 (empty -> .)

    parametros                     shift and go to state 66
    empty                          shift and go to state 67

state 44

    (35) expression -> ID CORCHETE_A . expression CORCHETE_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 68
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 45

    (36) expression -> ID PUNTO . ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> ID PUNTO . REMOVE PARENTESIS_A expression PARENTESIS_C

    ADD             shift and go to state 69
    REMOVE          shift and go to state 70


state 46

    (38) binary_op -> expression SUMA . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 71
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 47

    (39) binary_op -> expression RESTA . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 72
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 48

    (40) binary_op -> expression MULTIPLICACION . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 73
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 49

    (41) binary_op -> expression DIVISION . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 74
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 50

    (42) binary_op -> expression MENORQUE . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 75
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 51

    (43) binary_op -> expression MAYORQUE . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 76
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 52

    (44) binary_op -> expression IGUALQUE . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 77
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 53

    (45) binary_op -> expression MODULO . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 78
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 54

    (46) logical_op -> expression AND . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 79
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 55

    (47) logical_op -> expression OR . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 80
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 56

    (34) assign_statement -> ID IGUAL CORCHETE_A elementos . CORCHETE_C
    (32) elementos -> elementos . COMA expression

    CORCHETE_C      shift and go to state 81
    COMA            shift and go to state 82


state 57

    (31) elementos -> expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    CORCHETE_C      reduce using rule 31 (elementos -> expression .)
    COMA            reduce using rule 31 (elementos -> expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 58

    (48) logical_op -> NOT expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 48 (logical_op -> NOT expression .)
    PRINT           reduce using rule 48 (logical_op -> NOT expression .)
    WHILE           reduce using rule 48 (logical_op -> NOT expression .)
    IF              reduce using rule 48 (logical_op -> NOT expression .)
    FOR             reduce using rule 48 (logical_op -> NOT expression .)
    FUNCTION        reduce using rule 48 (logical_op -> NOT expression .)
    $end            reduce using rule 48 (logical_op -> NOT expression .)
    LLAVE_C         reduce using rule 48 (logical_op -> NOT expression .)
    COMA            reduce using rule 48 (logical_op -> NOT expression .)
    PARENTESIS_C    reduce using rule 48 (logical_op -> NOT expression .)
    CORCHETE_C      reduce using rule 48 (logical_op -> NOT expression .)
    TO              reduce using rule 48 (logical_op -> NOT expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! RESTA           [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! MULTIPLICACION  [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! DIVISION        [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! MENORQUE        [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! MAYORQUE        [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! IGUALQUE        [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! MODULO          [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! AND             [ reduce using rule 48 (logical_op -> NOT expression .) ]
  ! OR              [ reduce using rule 48 (logical_op -> NOT expression .) ]


state 59

    (22) call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .

    ID              reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)
    PRINT           reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)
    WHILE           reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)
    IF              reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)
    FOR             reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)
    FUNCTION        reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)
    $end            reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)
    LLAVE_C         reduce using rule 22 (call_function -> ID PARENTESIS_A argumentos PARENTESIS_C .)


state 60

    (24) argumentos -> expression COMA . argumentos
    (23) argumentos -> . expression
    (24) argumentos -> . expression COMA argumentos
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 38
    argumentos                     shift and go to state 83
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 61

    (12) print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .

    ID              reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)
    PRINT           reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)
    WHILE           reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)
    IF              reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)
    FOR             reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)
    FUNCTION        reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)
    $end            reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)
    LLAVE_C         reduce using rule 12 (print_statement -> PRINT PARENTESIS_A expression PARENTESIS_C .)


state 62

    (14) while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C . LLAVE_A instrucciones LLAVE_C

    LLAVE_A         shift and go to state 84


state 63

    (15) if_statement -> IF PARENTESIS_A expression PARENTESIS_C . LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C . LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C

    LLAVE_A         shift and go to state 85


state 64

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL . expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 86
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 65

    (19) parametros -> ID .
    (20) parametros -> ID . COMA parametros

    PARENTESIS_C    reduce using rule 19 (parametros -> ID .)
    COMA            shift and go to state 87


state 66

    (18) declare_function -> FUNCTION ID PARENTESIS_A parametros . PARENTESIS_C LLAVE_A instrucciones LLAVE_C

    PARENTESIS_C    shift and go to state 88


state 67

    (21) parametros -> empty .

    PARENTESIS_C    reduce using rule 21 (parametros -> empty .)


state 68

    (35) expression -> ID CORCHETE_A expression . CORCHETE_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    CORCHETE_C      shift and go to state 89
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 69

    (36) expression -> ID PUNTO ADD . PARENTESIS_A expression PARENTESIS_C

    PARENTESIS_A    shift and go to state 90


state 70

    (37) expression -> ID PUNTO REMOVE . PARENTESIS_A expression PARENTESIS_C

    PARENTESIS_A    shift and go to state 91


state 71

    (38) binary_op -> expression SUMA expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 38 (binary_op -> expression SUMA expression .)
    PRINT           reduce using rule 38 (binary_op -> expression SUMA expression .)
    WHILE           reduce using rule 38 (binary_op -> expression SUMA expression .)
    IF              reduce using rule 38 (binary_op -> expression SUMA expression .)
    FOR             reduce using rule 38 (binary_op -> expression SUMA expression .)
    FUNCTION        reduce using rule 38 (binary_op -> expression SUMA expression .)
    $end            reduce using rule 38 (binary_op -> expression SUMA expression .)
    LLAVE_C         reduce using rule 38 (binary_op -> expression SUMA expression .)
    COMA            reduce using rule 38 (binary_op -> expression SUMA expression .)
    PARENTESIS_C    reduce using rule 38 (binary_op -> expression SUMA expression .)
    CORCHETE_C      reduce using rule 38 (binary_op -> expression SUMA expression .)
    TO              reduce using rule 38 (binary_op -> expression SUMA expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! RESTA           [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! MULTIPLICACION  [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! DIVISION        [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! MENORQUE        [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! MAYORQUE        [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! IGUALQUE        [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! MODULO          [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! AND             [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]
  ! OR              [ reduce using rule 38 (binary_op -> expression SUMA expression .) ]


state 72

    (39) binary_op -> expression RESTA expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 39 (binary_op -> expression RESTA expression .)
    PRINT           reduce using rule 39 (binary_op -> expression RESTA expression .)
    WHILE           reduce using rule 39 (binary_op -> expression RESTA expression .)
    IF              reduce using rule 39 (binary_op -> expression RESTA expression .)
    FOR             reduce using rule 39 (binary_op -> expression RESTA expression .)
    FUNCTION        reduce using rule 39 (binary_op -> expression RESTA expression .)
    $end            reduce using rule 39 (binary_op -> expression RESTA expression .)
    LLAVE_C         reduce using rule 39 (binary_op -> expression RESTA expression .)
    COMA            reduce using rule 39 (binary_op -> expression RESTA expression .)
    PARENTESIS_C    reduce using rule 39 (binary_op -> expression RESTA expression .)
    CORCHETE_C      reduce using rule 39 (binary_op -> expression RESTA expression .)
    TO              reduce using rule 39 (binary_op -> expression RESTA expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! RESTA           [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! MULTIPLICACION  [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! DIVISION        [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! MENORQUE        [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! MAYORQUE        [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! IGUALQUE        [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! MODULO          [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! AND             [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]
  ! OR              [ reduce using rule 39 (binary_op -> expression RESTA expression .) ]


state 73

    (40) binary_op -> expression MULTIPLICACION expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    PRINT           reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    WHILE           reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    IF              reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    FOR             reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    FUNCTION        reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    $end            reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    LLAVE_C         reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    COMA            reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    PARENTESIS_C    reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    CORCHETE_C      reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    TO              reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! RESTA           [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! MULTIPLICACION  [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! DIVISION        [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! MENORQUE        [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! MAYORQUE        [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! IGUALQUE        [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! MODULO          [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! AND             [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]
  ! OR              [ reduce using rule 40 (binary_op -> expression MULTIPLICACION expression .) ]


state 74

    (41) binary_op -> expression DIVISION expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 41 (binary_op -> expression DIVISION expression .)
    PRINT           reduce using rule 41 (binary_op -> expression DIVISION expression .)
    WHILE           reduce using rule 41 (binary_op -> expression DIVISION expression .)
    IF              reduce using rule 41 (binary_op -> expression DIVISION expression .)
    FOR             reduce using rule 41 (binary_op -> expression DIVISION expression .)
    FUNCTION        reduce using rule 41 (binary_op -> expression DIVISION expression .)
    $end            reduce using rule 41 (binary_op -> expression DIVISION expression .)
    LLAVE_C         reduce using rule 41 (binary_op -> expression DIVISION expression .)
    COMA            reduce using rule 41 (binary_op -> expression DIVISION expression .)
    PARENTESIS_C    reduce using rule 41 (binary_op -> expression DIVISION expression .)
    CORCHETE_C      reduce using rule 41 (binary_op -> expression DIVISION expression .)
    TO              reduce using rule 41 (binary_op -> expression DIVISION expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! RESTA           [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! MULTIPLICACION  [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! DIVISION        [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! MENORQUE        [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! MAYORQUE        [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! IGUALQUE        [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! MODULO          [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! AND             [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]
  ! OR              [ reduce using rule 41 (binary_op -> expression DIVISION expression .) ]


state 75

    (42) binary_op -> expression MENORQUE expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    PRINT           reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    WHILE           reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    IF              reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    FOR             reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    FUNCTION        reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    $end            reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    LLAVE_C         reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    COMA            reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    PARENTESIS_C    reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    CORCHETE_C      reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    TO              reduce using rule 42 (binary_op -> expression MENORQUE expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! RESTA           [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! MULTIPLICACION  [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! DIVISION        [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! MENORQUE        [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! MAYORQUE        [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! IGUALQUE        [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! MODULO          [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! AND             [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]
  ! OR              [ reduce using rule 42 (binary_op -> expression MENORQUE expression .) ]


state 76

    (43) binary_op -> expression MAYORQUE expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    PRINT           reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    WHILE           reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    IF              reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    FOR             reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    FUNCTION        reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    $end            reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    LLAVE_C         reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    COMA            reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    PARENTESIS_C    reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    CORCHETE_C      reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    TO              reduce using rule 43 (binary_op -> expression MAYORQUE expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! RESTA           [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! MULTIPLICACION  [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! DIVISION        [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! MENORQUE        [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! MAYORQUE        [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! IGUALQUE        [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! MODULO          [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! AND             [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]
  ! OR              [ reduce using rule 43 (binary_op -> expression MAYORQUE expression .) ]


state 77

    (44) binary_op -> expression IGUALQUE expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    PRINT           reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    WHILE           reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    IF              reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    FOR             reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    FUNCTION        reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    $end            reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    LLAVE_C         reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    COMA            reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    PARENTESIS_C    reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    CORCHETE_C      reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    TO              reduce using rule 44 (binary_op -> expression IGUALQUE expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! RESTA           [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! MULTIPLICACION  [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! DIVISION        [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! MENORQUE        [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! MAYORQUE        [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! IGUALQUE        [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! MODULO          [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! AND             [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]
  ! OR              [ reduce using rule 44 (binary_op -> expression IGUALQUE expression .) ]


state 78

    (45) binary_op -> expression MODULO expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 45 (binary_op -> expression MODULO expression .)
    PRINT           reduce using rule 45 (binary_op -> expression MODULO expression .)
    WHILE           reduce using rule 45 (binary_op -> expression MODULO expression .)
    IF              reduce using rule 45 (binary_op -> expression MODULO expression .)
    FOR             reduce using rule 45 (binary_op -> expression MODULO expression .)
    FUNCTION        reduce using rule 45 (binary_op -> expression MODULO expression .)
    $end            reduce using rule 45 (binary_op -> expression MODULO expression .)
    LLAVE_C         reduce using rule 45 (binary_op -> expression MODULO expression .)
    COMA            reduce using rule 45 (binary_op -> expression MODULO expression .)
    PARENTESIS_C    reduce using rule 45 (binary_op -> expression MODULO expression .)
    CORCHETE_C      reduce using rule 45 (binary_op -> expression MODULO expression .)
    TO              reduce using rule 45 (binary_op -> expression MODULO expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! RESTA           [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! MULTIPLICACION  [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! DIVISION        [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! MENORQUE        [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! MAYORQUE        [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! IGUALQUE        [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! MODULO          [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! AND             [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]
  ! OR              [ reduce using rule 45 (binary_op -> expression MODULO expression .) ]


state 79

    (46) logical_op -> expression AND expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 46 (logical_op -> expression AND expression .)
    PRINT           reduce using rule 46 (logical_op -> expression AND expression .)
    WHILE           reduce using rule 46 (logical_op -> expression AND expression .)
    IF              reduce using rule 46 (logical_op -> expression AND expression .)
    FOR             reduce using rule 46 (logical_op -> expression AND expression .)
    FUNCTION        reduce using rule 46 (logical_op -> expression AND expression .)
    $end            reduce using rule 46 (logical_op -> expression AND expression .)
    LLAVE_C         reduce using rule 46 (logical_op -> expression AND expression .)
    COMA            reduce using rule 46 (logical_op -> expression AND expression .)
    PARENTESIS_C    reduce using rule 46 (logical_op -> expression AND expression .)
    CORCHETE_C      reduce using rule 46 (logical_op -> expression AND expression .)
    TO              reduce using rule 46 (logical_op -> expression AND expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! RESTA           [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! MULTIPLICACION  [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! DIVISION        [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! MENORQUE        [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! MAYORQUE        [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! IGUALQUE        [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! AND             [ reduce using rule 46 (logical_op -> expression AND expression .) ]
  ! OR              [ reduce using rule 46 (logical_op -> expression AND expression .) ]


state 80

    (47) logical_op -> expression OR expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

  ! shift/reduce conflict for SUMA resolved as shift
  ! shift/reduce conflict for RESTA resolved as shift
  ! shift/reduce conflict for MULTIPLICACION resolved as shift
  ! shift/reduce conflict for DIVISION resolved as shift
  ! shift/reduce conflict for MENORQUE resolved as shift
  ! shift/reduce conflict for MAYORQUE resolved as shift
  ! shift/reduce conflict for IGUALQUE resolved as shift
  ! shift/reduce conflict for MODULO resolved as shift
  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    ID              reduce using rule 47 (logical_op -> expression OR expression .)
    PRINT           reduce using rule 47 (logical_op -> expression OR expression .)
    WHILE           reduce using rule 47 (logical_op -> expression OR expression .)
    IF              reduce using rule 47 (logical_op -> expression OR expression .)
    FOR             reduce using rule 47 (logical_op -> expression OR expression .)
    FUNCTION        reduce using rule 47 (logical_op -> expression OR expression .)
    $end            reduce using rule 47 (logical_op -> expression OR expression .)
    LLAVE_C         reduce using rule 47 (logical_op -> expression OR expression .)
    COMA            reduce using rule 47 (logical_op -> expression OR expression .)
    PARENTESIS_C    reduce using rule 47 (logical_op -> expression OR expression .)
    CORCHETE_C      reduce using rule 47 (logical_op -> expression OR expression .)
    TO              reduce using rule 47 (logical_op -> expression OR expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55

  ! SUMA            [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! RESTA           [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! MULTIPLICACION  [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! DIVISION        [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! MENORQUE        [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! MAYORQUE        [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! IGUALQUE        [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! AND             [ reduce using rule 47 (logical_op -> expression OR expression .) ]
  ! OR              [ reduce using rule 47 (logical_op -> expression OR expression .) ]


state 81

    (34) assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .

    ID              reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)
    PRINT           reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)
    WHILE           reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)
    IF              reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)
    FOR             reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)
    FUNCTION        reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)
    $end            reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)
    LLAVE_C         reduce using rule 34 (assign_statement -> ID IGUAL CORCHETE_A elementos CORCHETE_C .)


state 82

    (32) elementos -> elementos COMA . expression
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 92
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 83

    (24) argumentos -> expression COMA argumentos .

    PARENTESIS_C    reduce using rule 24 (argumentos -> expression COMA argumentos .)


state 84

    (14) while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A . instrucciones LLAVE_C
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instrucciones                  shift and go to state 93
    instruccion                    shift and go to state 3
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 85

    (15) if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A . instrucciones LLAVE_C
    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A . instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instrucciones                  shift and go to state 94
    instruccion                    shift and go to state 3
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 86

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL expression . TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    TO              shift and go to state 95
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 87

    (20) parametros -> ID COMA . parametros
    (19) parametros -> . ID
    (20) parametros -> . ID COMA parametros
    (21) parametros -> . empty
    (50) empty -> .

    ID              shift and go to state 65
    PARENTESIS_C    reduce using rule 50 (empty -> .)

    parametros                     shift and go to state 96
    empty                          shift and go to state 67

state 88

    (18) declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C . LLAVE_A instrucciones LLAVE_C

    LLAVE_A         shift and go to state 97


state 89

    (35) expression -> ID CORCHETE_A expression CORCHETE_C .

    SUMA            reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    RESTA           reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    MULTIPLICACION  reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    DIVISION        reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    MENORQUE        reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    MAYORQUE        reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    IGUALQUE        reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    MODULO          reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    AND             reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    OR              reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    ID              reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    PRINT           reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    WHILE           reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    IF              reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    FOR             reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    FUNCTION        reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    $end            reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    LLAVE_C         reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    COMA            reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    PARENTESIS_C    reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    CORCHETE_C      reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)
    TO              reduce using rule 35 (expression -> ID CORCHETE_A expression CORCHETE_C .)


state 90

    (36) expression -> ID PUNTO ADD PARENTESIS_A . expression PARENTESIS_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 98
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 91

    (37) expression -> ID PUNTO REMOVE PARENTESIS_A . expression PARENTESIS_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 99
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 92

    (32) elementos -> elementos COMA expression .
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    CORCHETE_C      reduce using rule 32 (elementos -> elementos COMA expression .)
    COMA            reduce using rule 32 (elementos -> elementos COMA expression .)
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 93

    (14) while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones . LLAVE_C
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    LLAVE_C         shift and go to state 100
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instruccion                    shift and go to state 18
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 94

    (15) if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones . LLAVE_C
    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones . LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    LLAVE_C         shift and go to state 101
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instruccion                    shift and go to state 18
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 95

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL expression TO . expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (25) expression -> . NUMBER
    (26) expression -> . STRING
    (27) expression -> . BOOLEAN
    (28) expression -> . binary_op
    (29) expression -> . variable
    (30) expression -> . logical_op
    (35) expression -> . ID CORCHETE_A expression CORCHETE_C
    (36) expression -> . ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C
    (37) expression -> . ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C
    (38) binary_op -> . expression SUMA expression
    (39) binary_op -> . expression RESTA expression
    (40) binary_op -> . expression MULTIPLICACION expression
    (41) binary_op -> . expression DIVISION expression
    (42) binary_op -> . expression MENORQUE expression
    (43) binary_op -> . expression MAYORQUE expression
    (44) binary_op -> . expression IGUALQUE expression
    (45) binary_op -> . expression MODULO expression
    (33) variable -> . ID
    (46) logical_op -> . expression AND expression
    (47) logical_op -> . expression OR expression
    (48) logical_op -> . NOT expression

    NUMBER          shift and go to state 30
    STRING          shift and go to state 31
    BOOLEAN         shift and go to state 32
    ID              shift and go to state 27
    NOT             shift and go to state 36

    expression                     shift and go to state 102
    binary_op                      shift and go to state 33
    variable                       shift and go to state 34
    logical_op                     shift and go to state 35

state 96

    (20) parametros -> ID COMA parametros .

    PARENTESIS_C    reduce using rule 20 (parametros -> ID COMA parametros .)


state 97

    (18) declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A . instrucciones LLAVE_C
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instrucciones                  shift and go to state 103
    instruccion                    shift and go to state 3
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 98

    (36) expression -> ID PUNTO ADD PARENTESIS_A expression . PARENTESIS_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    PARENTESIS_C    shift and go to state 104
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 99

    (37) expression -> ID PUNTO REMOVE PARENTESIS_A expression . PARENTESIS_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    PARENTESIS_C    shift and go to state 105
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 100

    (14) while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .

    ID              reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    PRINT           reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    WHILE           reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    IF              reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FOR             reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FUNCTION        reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    $end            reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    LLAVE_C         reduce using rule 14 (while_statement -> WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)


state 101

    (15) if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .
    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C . ELSE LLAVE_A instrucciones LLAVE_C

    ID              reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    PRINT           reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    WHILE           reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    IF              reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FOR             reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FUNCTION        reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    $end            reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    LLAVE_C         reduce using rule 15 (if_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    ELSE            shift and go to state 106


state 102

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression . PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (38) binary_op -> expression . SUMA expression
    (39) binary_op -> expression . RESTA expression
    (40) binary_op -> expression . MULTIPLICACION expression
    (41) binary_op -> expression . DIVISION expression
    (42) binary_op -> expression . MENORQUE expression
    (43) binary_op -> expression . MAYORQUE expression
    (44) binary_op -> expression . IGUALQUE expression
    (45) binary_op -> expression . MODULO expression
    (46) logical_op -> expression . AND expression
    (47) logical_op -> expression . OR expression

    PARENTESIS_C    shift and go to state 107
    SUMA            shift and go to state 46
    RESTA           shift and go to state 47
    MULTIPLICACION  shift and go to state 48
    DIVISION        shift and go to state 49
    MENORQUE        shift and go to state 50
    MAYORQUE        shift and go to state 51
    IGUALQUE        shift and go to state 52
    MODULO          shift and go to state 53
    AND             shift and go to state 54
    OR              shift and go to state 55


state 103

    (18) declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones . LLAVE_C
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    LLAVE_C         shift and go to state 108
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instruccion                    shift and go to state 18
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 104

    (36) expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .

    SUMA            reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    RESTA           reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    MULTIPLICACION  reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    DIVISION        reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    MENORQUE        reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    MAYORQUE        reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    IGUALQUE        reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    MODULO          reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    AND             reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    OR              reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    ID              reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    PRINT           reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    WHILE           reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    IF              reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    FOR             reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    FUNCTION        reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    $end            reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    LLAVE_C         reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    COMA            reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    PARENTESIS_C    reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    CORCHETE_C      reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)
    TO              reduce using rule 36 (expression -> ID PUNTO ADD PARENTESIS_A expression PARENTESIS_C .)


state 105

    (37) expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .

    SUMA            reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    RESTA           reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    MULTIPLICACION  reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    DIVISION        reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    MENORQUE        reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    MAYORQUE        reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    IGUALQUE        reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    MODULO          reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    AND             reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    OR              reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    ID              reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    PRINT           reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    WHILE           reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    IF              reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    FOR             reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    FUNCTION        reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    $end            reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    LLAVE_C         reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    COMA            reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    PARENTESIS_C    reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    CORCHETE_C      reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)
    TO              reduce using rule 37 (expression -> ID PUNTO REMOVE PARENTESIS_A expression PARENTESIS_C .)


state 106

    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE . LLAVE_A instrucciones LLAVE_C

    LLAVE_A         shift and go to state 109


state 107

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C . LLAVE_A instrucciones LLAVE_C

    LLAVE_A         shift and go to state 110


state 108

    (18) declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .

    ID              reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    PRINT           reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    WHILE           reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    IF              reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FOR             reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FUNCTION        reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    $end            reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    LLAVE_C         reduce using rule 18 (declare_function -> FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)


state 109

    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A . instrucciones LLAVE_C
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instrucciones                  shift and go to state 111
    instruccion                    shift and go to state 3
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 110

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A . instrucciones LLAVE_C
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instrucciones                  shift and go to state 112
    instruccion                    shift and go to state 3
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 111

    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones . LLAVE_C
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    LLAVE_C         shift and go to state 113
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instruccion                    shift and go to state 18
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 112

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones . LLAVE_C
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print_statement
    (5) instruccion -> . while_statement
    (6) instruccion -> . if_statement
    (7) instruccion -> . if_else_statement
    (8) instruccion -> . assign_statement
    (9) instruccion -> . for_statement
    (10) instruccion -> . declare_function
    (11) instruccion -> . call_function
    (49) instruccion -> . ID MASIGUAL
    (12) print_statement -> . PRINT PARENTESIS_A expression PARENTESIS_C
    (14) while_statement -> . WHILE PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (15) if_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (16) if_else_statement -> . IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C
    (17) assign_statement -> . ID IGUAL expression
    (34) assign_statement -> . ID IGUAL CORCHETE_A elementos CORCHETE_C
    (13) for_statement -> . FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (18) declare_function -> . FUNCTION ID PARENTESIS_A parametros PARENTESIS_C LLAVE_A instrucciones LLAVE_C
    (22) call_function -> . ID PARENTESIS_A argumentos PARENTESIS_C

    LLAVE_C         shift and go to state 114
    ID              shift and go to state 12
    PRINT           shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17

    instruccion                    shift and go to state 18
    print_statement                shift and go to state 4
    while_statement                shift and go to state 5
    if_statement                   shift and go to state 6
    if_else_statement              shift and go to state 7
    assign_statement               shift and go to state 8
    for_statement                  shift and go to state 9
    declare_function               shift and go to state 10
    call_function                  shift and go to state 11

state 113

    (16) if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .

    ID              reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)
    PRINT           reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)
    WHILE           reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)
    IF              reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)
    FOR             reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)
    FUNCTION        reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)
    $end            reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)
    LLAVE_C         reduce using rule 16 (if_else_statement -> IF PARENTESIS_A expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C ELSE LLAVE_A instrucciones LLAVE_C .)


state 114

    (13) for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .

    ID              reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    PRINT           reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    WHILE           reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    IF              reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FOR             reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    FUNCTION        reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    $end            reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)
    LLAVE_C         reduce using rule 13 (for_statement -> FOR PARENTESIS_A ID IGUAL expression TO expression PARENTESIS_C LLAVE_A instrucciones LLAVE_C .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SUMA in state 58 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 58 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 58 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 58 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 58 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 58 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 58 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 58 resolved as shift
WARNING: shift/reduce conflict for AND in state 58 resolved as shift
WARNING: shift/reduce conflict for OR in state 58 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 71 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 71 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 71 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 71 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 71 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 71 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 71 resolved as shift
WARNING: shift/reduce conflict for AND in state 71 resolved as shift
WARNING: shift/reduce conflict for OR in state 71 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 72 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 72 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 72 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 72 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 72 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 72 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 72 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 72 resolved as shift
WARNING: shift/reduce conflict for AND in state 72 resolved as shift
WARNING: shift/reduce conflict for OR in state 72 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 73 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 73 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 73 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 73 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 73 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 73 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 73 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 73 resolved as shift
WARNING: shift/reduce conflict for AND in state 73 resolved as shift
WARNING: shift/reduce conflict for OR in state 73 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 74 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 74 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 74 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 74 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 74 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 74 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 74 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 74 resolved as shift
WARNING: shift/reduce conflict for AND in state 74 resolved as shift
WARNING: shift/reduce conflict for OR in state 74 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 75 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 75 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 75 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 75 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 75 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 75 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 75 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 75 resolved as shift
WARNING: shift/reduce conflict for AND in state 75 resolved as shift
WARNING: shift/reduce conflict for OR in state 75 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 76 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 76 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 76 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 76 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 76 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 76 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 76 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 76 resolved as shift
WARNING: shift/reduce conflict for AND in state 76 resolved as shift
WARNING: shift/reduce conflict for OR in state 76 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 77 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 77 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 77 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 77 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 77 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 77 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 77 resolved as shift
WARNING: shift/reduce conflict for AND in state 77 resolved as shift
WARNING: shift/reduce conflict for OR in state 77 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 78 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 78 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 78 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 78 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 78 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 78 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 78 resolved as shift
WARNING: shift/reduce conflict for AND in state 78 resolved as shift
WARNING: shift/reduce conflict for OR in state 78 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 79 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 79 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 79 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 79 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 79 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 79 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 79 resolved as shift
WARNING: shift/reduce conflict for AND in state 79 resolved as shift
WARNING: shift/reduce conflict for OR in state 79 resolved as shift
WARNING: shift/reduce conflict for SUMA in state 80 resolved as shift
WARNING: shift/reduce conflict for RESTA in state 80 resolved as shift
WARNING: shift/reduce conflict for MULTIPLICACION in state 80 resolved as shift
WARNING: shift/reduce conflict for DIVISION in state 80 resolved as shift
WARNING: shift/reduce conflict for MENORQUE in state 80 resolved as shift
WARNING: shift/reduce conflict for MAYORQUE in state 80 resolved as shift
WARNING: shift/reduce conflict for IGUALQUE in state 80 resolved as shift
WARNING: shift/reduce conflict for MODULO in state 80 resolved as shift
WARNING: shift/reduce conflict for AND in state 80 resolved as shift
WARNING: shift/reduce conflict for OR in state 80 resolved as shift
